/* dactl-1.0.vapi generated by valac 0.38.8, do not modify. */

namespace Dactl {
	namespace UI {
		[CCode (cheader_filename = "dactl.h")]
		public class Factory : GLib.Object, Dactl.Factory {
			public Factory ();
			public static Dactl.UI.Factory get_default ();
		}
		[CCode (cheader_filename = "dactl.h")]
		public class Plugin : GLib.Object {
			public Plugin (Dactl.ApplicationView view);
			public Dactl.ApplicationView view { get; set construct; }
		}
		[CCode (cheader_filename = "dactl.h")]
		public class PluginManager : Dactl.PluginManager {
			public PluginManager (Dactl.ApplicationView view);
			protected override void add_extension ();
			public Dactl.UI.Plugin ext { get; set; }
		}
		[CCode (cheader_filename = "dactl.h")]
		[GtkTemplate (ui = "/org/coanda/libdactl/ui/rich-content.ui")]
		public class RichContent : Dactl.CompositeWidget, Dactl.CldAdapter {
			public RichContent ();
			public void add_div (string color);
			public override void build_from_xml_node (Xml.Node* node);
			public RichContent.from_xml_node (Xml.Node* node);
			public override void update_objects (Gee.Map<string,Dactl.Object> val);
			public override Gee.Map<string,Dactl.Object> objects { get; set; }
			public string uri { get; set; }
			protected override string xml { get; }
			protected override string xsd { get; }
			public signal void div_clicked (string number);
		}
		[CCode (cheader_filename = "dactl.h")]
		public abstract class WebKitWidget : WebKit.WebView, Dactl.Widget, Dactl.Container, Dactl.Buildable, Dactl.Object {
			public WebKitWidget ();
			public abstract void build_from_xml_node (Xml.Node* node);
			public abstract void update_objects (Gee.Map<string,Dactl.Object> val);
			public virtual string id { get; set; }
			protected virtual Xml.Node* node { get; set; }
			public abstract Gee.Map<string,Dactl.Object> objects { get; set; }
			protected abstract string xml { get; }
			protected abstract string xsd { get; }
		}
		[CCode (cheader_filename = "dactl.h")]
		[GtkTemplate (ui = "/org/coanda/libdactl/ui/window.ui")]
		public class Window : Dactl.UI.WindowBase {
			public Window ();
			public void add_actions ();
			public void add_child (Dactl.Object object);
			public void add_page (Dactl.Page page);
			public override void build_from_xml_node (Xml.Node* node);
			public Window.from_xml_node (Xml.Node* node);
			public override void update_objects (Gee.Map<string,Dactl.Object> val);
			public int index { get; set; }
			public override Gee.Map<string,Dactl.Object> objects { get; set; }
			protected override string xml { get; }
			protected override string xsd { get; }
		}
		[CCode (cheader_filename = "dactl.h")]
		public abstract class WindowBase : Gtk.ApplicationWindow, Dactl.Container, Dactl.Buildable, Dactl.Object {
			public WindowBase ();
			public abstract void build_from_xml_node (Xml.Node* node);
			public abstract void update_objects (Gee.Map<string,Dactl.Object> val);
			public bool fullscreen { get; set; }
			public virtual string id { get; set; }
			protected virtual Xml.Node* node { get; set; }
			public abstract Gee.Map<string,Dactl.Object> objects { get; set; }
			public Dactl.UI.WindowState state { get; set; }
			protected abstract string xml { get; }
			protected abstract string xsd { get; }
		}
		[CCode (cheader_filename = "dactl.h")]
		public enum WindowState {
			WINDOWED,
			FULLSCREEN
		}
		[CCode (cheader_filename = "dactl.h")]
		public static double degrees_to_positive (double t);
		[CCode (cheader_filename = "dactl.h")]
		public static double degrees_to_radians (double t);
		[CCode (cheader_filename = "dactl.h")]
		public static Gdk.RGBA get_color (string desc);
		[CCode (cheader_filename = "dactl.h")]
		public static Gee.List<double?> hex_to_rgb (string hex);
		[CCode (cheader_filename = "dactl.h")]
		public static int signum (double x);
		[CCode (cheader_filename = "dactl.h")]
		public static GLib.Type? type_from_name (string name);
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/ai-control.ui")]
	public class AIControl : Dactl.CompositeWidget, Dactl.CldAdapter {
		public AIControl (string ai_ref);
		public override void build_from_xml_node (Xml.Node* node);
		public AIControl.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public string ch_ref { get; set; }
		public Cld.Channel channel { get; set; }
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/ao-control.ui")]
	public class AOControl : Dactl.CompositeWidget, Dactl.CldAdapter {
		public AOControl ();
		public override void build_from_xml_node (Xml.Node* node);
		public AOControl.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public string ch_ref { get; set; }
		public Cld.Channel channel { get; set; }
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public abstract class AbstractConfig : GLib.Object, Dactl.Configuration {
		public AbstractConfig ();
		public virtual bool get_bool (string ns, string key) throws GLib.Error;
		public virtual int get_int (string ns, string key) throws GLib.Error;
		public virtual Gee.ArrayList<int> get_int_list (string ns, string key) throws GLib.Error;
		public virtual string get_string (string ns, string key) throws GLib.Error;
		public virtual Gee.ArrayList<string> get_string_list (string ns, string key) throws GLib.Error;
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ApplicationConfig : GLib.Object {
		public ApplicationConfig (string file_name);
		public bool get_boolean_property (string property);
		public double get_double_property (string property);
		public double get_float_property (string property);
		public int get_int_property (string property);
		public string get_string_property (string property);
		public Xml.Node* get_xml_node (string xpath) throws Dactl.ConfigError;
		public Xml.XPath.NodeSet* get_xml_nodeset (string xpath) throws Dactl.ConfigError;
		public void print_xml_node (string xpath) throws Dactl.ConfigError;
		public void save ();
		public void set_boolean_property (string property, bool value);
		public void set_double_property (string property, double value);
		public void set_float_property (string property, float value);
		public void set_int_property (string property, int value);
		public void set_string_property (string property, string value);
		public void set_xml_node (string xpath, Xml.Node* node);
		public string file_name { get; set; }
		public bool loaded { get; set; }
		public signal void property_changed (string property);
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ApplicationController : GLib.Object {
		public ApplicationController (Dactl.ApplicationModel model, Dactl.ApplicationView view);
		protected void save_requested_cb ();
		public void start_acquisition ();
		public void start_device_output ();
		public void stop_acquisition ();
		public void stop_device_output ();
		public bool admin { get; set; }
		public signal void acquisition_state_changed (bool state);
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ApplicationFactory : GLib.Object, Dactl.Factory {
		public ApplicationFactory ();
		public static Dactl.ApplicationFactory get_default ();
		public static void register_factory (Dactl.Factory factory);
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ApplicationModel : GLib.Object, Dactl.Container {
		public ApplicationModel (string config_filename);
		public bool active { get; set; }
		public bool admin { get; set; }
		public Dactl.ApplicationConfig config { get; private set; }
		public string config_filename { get; set; }
		public Cld.Context ctx { get; private set; }
		public bool def_enabled { get; set; }
		public string name { get; set; }
		public GLib.Settings settings { get; private set; }
		public bool verbose { get; set; }
		public Cld.XmlConfig xml { get; private set; }
		public signal void log_state_changed (string log, bool state);
	}
	[CCode (cheader_filename = "dactl.h")]
	public class Axis : Dactl.Canvas, Dactl.Buildable, Dactl.Object {
		public double _max;
		public Axis ();
		protected void connect_notify_signals ();
		public override bool draw (Cairo.Context cr);
		public Axis.from_xml_node (Xml.Node* node);
		protected void update_node ();
		public int div_major { get; set; }
		public int div_minor { get; set; }
		public Dactl.AxisFlag flags { get; set; }
		public string label { get; set; }
		public double max { get; set; }
		public double min { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public Dactl.Orientation orientation { get; set; }
		public bool show_label { get; set; }
		public signal void label_changed (string label);
		public signal void orientation_changed (Dactl.Orientation orientation);
		public signal void range_changed (double min, double max);
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/box.ui")]
	public class Box : Dactl.CompositeWidget {
		public Box ();
		public void add_child (Dactl.Object object);
		public override void build_from_xml_node (Xml.Node* node);
		public Box.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public abstract class Canvas : Gtk.DrawingArea, Dactl.Object {
		public Canvas ();
		public virtual string id { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ChannelMatrix : GLib.Object, Dactl.Object, Dactl.Container, Dactl.Buildable, Dactl.CldAdapter {
		public ChannelMatrix ();
		public ChannelMatrix.from_xml_node (Xml.Node* node);
		public bool get_satisfied ();
		public Gee.Map<string,Dactl.TriplePoint?> data { get; private set; }
		protected virtual Xml.Node* node { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ChannelMatrixElement : GLib.Object, Dactl.Object, Dactl.Buildable {
		public ChannelMatrixElement ();
		public ChannelMatrixElement.from_xml_node (Xml.Node* node);
		public double a { get; set; }
		public double b { get; set; }
		public string chref { get; set; }
		protected virtual Xml.Node* node { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ChannelTreeCategory : GLib.Object, Dactl.Object, Dactl.Buildable, Dactl.Container {
		public ChannelTreeCategory ();
		public ChannelTreeCategory.from_xml_node (Xml.Node* node);
		protected virtual Xml.Node* node { get; set; }
		public string title { get; set; }
		protected virtual string xml { get; }
		protected virtual string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ChannelTreeEntry : GLib.Object, Dactl.Object, Dactl.Buildable {
		public ChannelTreeEntry ();
		public ChannelTreeEntry.from_xml_node (Xml.Node* node);
		public ChannelTreeEntry.with_data (string id, string ch_ref);
		public string ch_ref { get; set; }
		public Cld.Channel channel { get; set; }
		public bool channel_isset { get; private set; }
		protected virtual Xml.Node* node { get; set; }
		public double value { get; private set; }
		protected virtual string xml { get; }
		protected virtual string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/channel-tree.ui")]
	public class ChannelTreeView : Dactl.CompositeWidget, Dactl.CldAdapter {
		public enum Columns {
			TAG,
			DESCRIPTION,
			VALUE,
			AVG,
			SSDEV,
			UNITS,
			SSIZE,
			HIDDEN_ID;
			public string to_string ();
		}
		public ChannelTreeView ();
		public override void build_from_xml_node (Xml.Node* node);
		public ChannelTreeView.from_xml_node (Xml.Node* node);
		public virtual void offer_cld_object (Cld.Object object);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		public bool show_header { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
		public signal void channel_selected (string id);
		public signal void channels_loaded ();
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ChannelVector : GLib.Object, Dactl.Object, Dactl.Container, Dactl.Buildable, Dactl.CldAdapter {
		public ChannelVector ();
		public ChannelVector.from_xml_node (Xml.Node* node);
		public Dactl.SimplePoint[] to_array ();
		protected virtual Xml.Node* node { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ChannelVectorElement : GLib.Object, Dactl.Object, Dactl.Buildable {
		public string chref;
		public double xvalue;
		public ChannelVectorElement ();
		public ChannelVectorElement.from_xml_node (Xml.Node* node);
		protected virtual Xml.Node* node { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/chart.ui")]
	public class Chart : Dactl.CompositeWidget {
		[GtkChild]
		protected Dactl.ChartCanvas canvas;
		[GtkChild]
		protected Gtk.Label lbl_title;
		[GtkChild]
		protected Gtk.Label lbl_x_axis;
		[GtkChild]
		protected Gtk.Label lbl_y_axis;
		protected Dactl.Axis x_axis;
		protected Dactl.Axis y_axis;
		public Chart ();
		public override void build_from_xml_node (Xml.Node* node);
		protected void connect_notify_signals ();
		public Chart.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public Dactl.ChartFlag flags { get; set; }
		public int height_min { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		protected bool satisfied { get; set; }
		public string title { get; set; }
		public int width_min { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class ChartArea : Gtk.DrawingArea {
		public Gee.Map<string,Gee.List<Dactl.Point>> data_series;
		public string selected_series;
		public Gee.List<Gee.List<double?>> series_colors;
		public ChartArea ();
		public override bool draw (Cairo.Context cr);
		public int n_x_divisions_major { private get; set; }
		public int n_x_divisions_minor { private get; set; }
		public int n_y_divisions_major { private get; set; }
		public int n_y_divisions_minor { private get; set; }
		public double x_axis_max { private get; set; }
		public double x_axis_min { private get; set; }
		public double y_axis_max { private get; set; }
		public double y_axis_min { private get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	protected class ChartCanvas : Dactl.Canvas {
		public ChartCanvas ();
		public override bool button_press_event (Gdk.EventButton event);
		public override bool button_release_event (Gdk.EventButton event);
		public override bool draw (Cairo.Context cr);
		public override bool motion_notify_event (Gdk.EventMotion event);
		public void redraw ();
		public bool draw_grid { get; set; }
		public bool draw_grid_border { get; set; }
		public Dactl.Axis x_axis { get; set; }
		public Dactl.Axis y_axis { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/chart-widget.ui")]
	public class ChartWidget : Gtk.Box {
		protected Gtk.Widget chart_area;
		public string schema;
		protected Gtk.Widget x_axis_area;
		protected Gtk.Widget y_axis_area;
		public ChartWidget ();
		public virtual void add_point_to_series (string id, double x, double y);
		public virtual void add_series (string id);
		public virtual void add_series_color (Gee.List<double?> color);
		public virtual void add_series_with_data (string id, Gee.List<Dactl.Point> data);
		public virtual void select_series (string series_id);
		public void update_settings ();
		public int height_min { get; set; }
		public int n_x_divisions_major { get; set; }
		public int n_x_divisions_minor { get; set; }
		public int n_y_divisions_major { get; set; }
		public int n_y_divisions_minor { get; set; }
		public Gtk.Dialog settings_dialog { get; set; }
		public string title { get; set; }
		public int width_min { get; set; }
		public string x_axis_label { get; set; }
		public double x_axis_max { get; set; }
		public double x_axis_min { get; set; }
		public string y_axis_label { get; set; }
		public double y_axis_max { get; set; }
		public double y_axis_min { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	protected class ColorMap : Dactl.Canvas, Dactl.Buildable, Dactl.Object {
		public double _max;
		protected Gdk.RGBA _max_color;
		protected Gdk.RGBA _min_color;
		public ColorMap ();
		protected void connect_notify_signals ();
		public override bool draw (Cairo.Context cr);
		public ColorMap.from_xml_node (Xml.Node* node);
		protected void update_node ();
		public int div_major { get; set; }
		public int div_minor { get; set; }
		public Dactl.AxisFlag flags { get; set; }
		public Dactl.ColorGradientType gradient { get; set; }
		public string label { get; set; }
		public double max { get; set; }
		public Gdk.RGBA max_color { get; set; }
		protected string max_color_spec { get; set; }
		public double min { get; set; }
		public Gdk.RGBA min_color { get; set; }
		protected string min_color_spec { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public bool show_label { get; set; }
		public signal void label_changed (string label);
		public signal void range_changed (double min, double max);
	}
	[CCode (cheader_filename = "dactl.h")]
	public abstract class CompositeWidget : Gtk.Box, Dactl.Widget, Dactl.Container, Dactl.Buildable, Dactl.Object {
		public CompositeWidget ();
		public abstract void build_from_xml_node (Xml.Node* node);
		public abstract void update_objects (Gee.Map<string,Dactl.Object> val);
		public virtual string id { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public abstract Gee.Map<string,Dactl.Object> objects { get; set; }
		protected abstract string xml { get; }
		protected abstract string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public abstract class CustomWidget : Gtk.DrawingArea, Dactl.Widget, Dactl.Buildable, Dactl.Object {
		public CustomWidget ();
		public abstract void build_from_xml_node (Xml.Node* node);
		protected abstract void update_node ();
		public virtual string id { get; set; }
		protected virtual Xml.Node* node { get; set; }
		protected abstract string xml { get; }
		protected abstract string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class DataSeries : GLib.Object, Dactl.Object, Dactl.Buildable, Dactl.CldAdapter {
		public DataSeries ();
		public DataSeries.from_xml_node (Xml.Node* node);
		public Dactl.SimplePoint[] to_array ();
		public int buffer_size { get; private set; }
		public string ch_ref { get; set; }
		public Cld.Channel channel { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public int stride { get; private set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/digital-control.ui")]
	public class DigitalControl : Dactl.CompositeWidget, Dactl.CldAdapter {
		public DigitalControl ();
		public override void build_from_xml_node (Xml.Node* node);
		public DigitalControl.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public string ch_ref { get; set; }
		public Cld.DChannel channel { get; set; }
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/exec-control.ui")]
	public class ExecControl : Dactl.CompositeWidget {
		public ExecControl ();
		public override void build_from_xml_node (Xml.Node* node);
		public ExecControl.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class Grid : GLib.Object, Dactl.Object {
		public Grid ();
		public Dactl.GridFlag flags { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class HeatMap : GLib.Object, Dactl.Object, Dactl.Container, Dactl.Buildable, Dactl.Drawable {
		protected Gdk.RGBA _max_color;
		protected Gdk.RGBA _min_color;
		public HeatMap ();
		protected void connect_notify_signals ();
		public HeatMap.from_xml_node (Xml.Node* node);
		public void refresh ();
		protected void update_node ();
		protected string interpolation_type { get; set; }
		public Gdk.RGBA max_color { get; set; }
		protected string max_color_spec { get; set; }
		public Gdk.RGBA min_color { get; set; }
		protected string min_color_spec { get; set; }
		protected virtual Xml.Node* node { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/log-control.ui")]
	public class LogControl : Dactl.CompositeWidget, Dactl.CldAdapter {
		public LogControl ();
		public override void build_from_xml_node (Xml.Node* node);
		public LogControl.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public Cld.Log log { get; set; }
		public string log_ref { get; set; }
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class MetaConfig : Dactl.AbstractConfig {
		public MetaConfig ();
		public override bool get_bool (string ns, string key) throws GLib.Error;
		public override int get_int (string ns, string key) throws GLib.Error;
		public override Gee.ArrayList<int> get_int_list (string ns, string key) throws GLib.Error;
		public override string get_string (string ns, string key) throws GLib.Error;
		public override Gee.ArrayList<string> get_string_list (string ns, string key) throws GLib.Error;
	}
	[CCode (cheader_filename = "dactl.h")]
	public abstract class ModuleLoader : GLib.Object {
		public ModuleLoader (string path);
		public override void constructed ();
		protected abstract bool load_module_from_file (GLib.File file);
		protected abstract bool load_module_from_info (Dactl.PluginInformation info);
		public void load_modules ();
		public void load_modules_sync (GLib.Cancellable? cancellable = null);
		public string base_path { get; set construct; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/page.ui")]
	public class Page : Dactl.CompositeWidget {
		public Page ();
		public void add_child (Dactl.Object object);
		public override void build_from_xml_node (Xml.Node* node);
		public Page.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public int index { get; set; }
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		public string title { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/pid-control.ui")]
	public class PidControl : Dactl.CompositeWidget, Dactl.CldAdapter {
		public PidControl ();
		public override void build_from_xml_node (Xml.Node* node);
		public PidControl.from_xml_node (Xml.Node* node);
		public void shutdown ();
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		public Cld.Pid2 pid { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class Plugin : GLib.Object {
		public Plugin (string name, string? title, string? description = null, Dactl.PluginCapabilities capabilities = PluginCapabilities.NONE);
		public override void constructed ();
		public bool active { get; set; }
		public Dactl.PluginCapabilities capabilities { get; set construct; }
		public string description { get; construct; }
		public Dactl.Factory factory { get; protected set; }
		public virtual bool has_factory { get; }
		public string name { get; construct; }
		public string title { get; set construct; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class PluginExtension : Peas.ExtensionBase, Dactl.Extension, Peas.Activatable {
		public PluginExtension ();
	}
	[CCode (cheader_filename = "dactl.h")]
	public class PluginInformation : GLib.Object {
		public static Dactl.PluginInformation new_from_file (GLib.File file) throws GLib.Error;
		public string module_path { get; construct; }
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class PluginLoader : Dactl.ModuleLoader {
		public PluginLoader ();
		public void add_plugin (Dactl.Plugin plugin);
		public override void constructed ();
		public Dactl.Plugin? get_plugin_by_name (string name);
		public Gee.Collection<Dactl.Plugin> list_plugins ();
		protected override bool load_module_from_file (GLib.File module_file);
		protected override bool load_module_from_info (Dactl.PluginInformation info);
		public bool plugin_disabled (string name);
		public signal void plugin_available (Dactl.Plugin plugin);
	}
	[CCode (cheader_filename = "dactl.h")]
	public abstract class PluginManager {
		protected Peas.Engine engine;
		protected Peas.ExtensionSet extensions;
		protected string search_path;
		public PluginManager ();
		protected abstract void add_extension ();
		protected virtual void init ();
		protected virtual void load_plugins ();
	}
	[CCode (cheader_filename = "dactl.h")]
	public class Pnid : Dactl.CompositeWidget, Dactl.CldAdapter {
		public Pnid (string image_file);
		public override void build_from_xml_node (Xml.Node* node);
		public Pnid.from_xml_node (Xml.Node* node);
		public virtual void offer_cld_object (Cld.Object object);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public string image_file { get; set; }
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		public int timeout { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
		public signal void channels_loaded ();
	}
	[CCode (cheader_filename = "dactl.h")]
	public class PnidElement : GLib.Object, Dactl.Object, Dactl.Buildable {
		public PnidElement ();
		public PnidElement.from_xml_node (Xml.Node* node);
		protected void update_node ();
		public PnidElement.with_data (string id, string cld_ref);
		public string cld_ref { get; set; }
		public string format { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public string ptype { get; set; }
		public Cld.Sensor sensor { get; set; }
		public bool sensor_isset { get; private set; }
		public string svg_ref { get; set; }
		public double value { get; private set; }
		protected virtual string xml { get; }
		protected virtual string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[Compact]
	public class Point : GLib.Object {
		public Point (double x, double y);
		public double x { get; set; }
		public double y { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class PolarAxis : GLib.Object, Dactl.Buildable, Dactl.Object {
		protected Gdk.RGBA _color;
		public PolarAxis ();
		protected void connect_notify_signals ();
		public PolarAxis.from_xml_node (Xml.Node* node);
		protected void update_node ();
		public Dactl.PolarAxisType axis_type { get; set; }
		public Gdk.RGBA color { get; set; }
		public int div_major { get; set; }
		public int div_minor { get; set; }
		public Dactl.AxisFlag flags { get; set; }
		public virtual string id { get; set; }
		public double intersect { get; set; }
		public string label { get; set; }
		public double max { get; set; }
		public double min { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public bool show_label { get; set; }
		public signal void label_changed (string label);
		public signal void orientation_changed (Dactl.Orientation orientation);
		public signal void range_changed (double min, double max);
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/polar-chart.ui")]
	public class PolarChart : Dactl.CompositeWidget {
		protected Dactl.PolarAxis angle_axis;
		[GtkChild]
		protected Dactl.PolarChartCanvas canvas;
		[GtkChild]
		protected Gtk.Label lbl_c_axis;
		[GtkChild]
		protected Gtk.Label lbl_title;
		[GtkChild]
		protected Gtk.Label lbl_x_axis;
		protected Dactl.PolarAxis mag_axis;
		public PolarChart ();
		public override void build_from_xml_node (Xml.Node* node);
		public PolarChart.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public Dactl.ChartFlag flags { get; set; }
		public int height_min { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		public int refresh_ms { get; set; }
		protected bool satisfied { get; set; }
		public string title { get; set; }
		public int width_min { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
		public double zoom { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	protected class PolarChartCanvas : Dactl.Canvas {
		public PolarChartCanvas ();
		public override bool button_press_event (Gdk.EventButton event);
		public override bool button_release_event (Gdk.EventButton event);
		public override bool draw (Cairo.Context cr);
		public override bool motion_notify_event (Gdk.EventMotion event);
		public void redraw ();
		public Dactl.PolarAxis angle_axis { get; set; }
		public bool draw_grid { get; set; }
		public bool draw_grid_border { get; set; }
		public Gtk.DrawingArea dwg_color_map { get; set; }
		public Dactl.PolarChartGrid grid { get; private set; }
		public Dactl.PolarAxis mag_axis { get; set; }
		public double zoom { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[Compact]
	public class PolarChartGrid : Cairo.Context {
		public PolarChartGrid (Cairo.Surface target);
		public void draw (Dactl.PolarAxis mag_axis, Dactl.PolarAxis angle_axis, int w, int h, double zoom);
		public void limits (Dactl.PolarAxis mag_axis, Dactl.PolarAxis angle_axis, int w, int h, out double x_max, out double x_min, out double y_max, out double y_min);
	}
	[CCode (cheader_filename = "dactl.h")]
	public class PolarHeatMap : GLib.Object, Dactl.Object, Dactl.Container, Dactl.Buildable, Dactl.Drawable {
		public struct AnnulusSector {
			public double x;
			public double y;
			public double xc;
			public double yc;
			public double theta;
			public double width;
			public double sweep;
		}
		protected Gdk.RGBA _max_color;
		protected Gdk.RGBA _min_color;
		public PolarHeatMap ();
		protected void connect_notify_signals ();
		public PolarHeatMap.from_xml_node (Xml.Node* node);
		public void refresh ();
		protected void update_node ();
		public Dactl.ColorGradientType gradient { get; set; }
		protected string interpolation_type { get; set; }
		public Gdk.RGBA max_color { get; set; }
		protected string max_color_spec { get; set; }
		public Gdk.RGBA min_color { get; set; }
		protected string min_color_spec { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public double zmax { get; set; }
		public double zmin { get; set; }
		public double zoom { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class RTChart : Dactl.Chart, Dactl.Settable {
		public RTChart ();
		public RTChart.from_xml_node (Xml.Node* node);
		public void highlight_trace (string id);
		public void update_objects (Gee.Map<string,Dactl.Object> val);
		public Gee.Map<string,Dactl.Object> objects { get; set; }
		public int refresh_ms { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/rt-chart-settings.ui")]
	public class RTChartSettings : Gtk.ScrolledWindow, Dactl.SettingsWidget {
		public RTChartSettings ();
		public string title { get; set; }
		public int x_axis_div_major { get; set; }
		public int x_axis_div_minor { get; set; }
		public string x_axis_label { get; set; }
		public double x_axis_max { get; set; }
		public double x_axis_min { get; set; }
		public int y_axis_div_major { get; set; }
		public int y_axis_div_minor { get; set; }
		public string y_axis_label { get; set; }
		public double y_axis_max { get; set; }
		public double y_axis_min { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class RTMultiChannelTrace : Dactl.Trace, Dactl.Container {
		public RTMultiChannelTrace (Xml.Ns* ns, string id, Dactl.TraceDrawType draw_type, int line_weight, Gdk.RGBA color);
		public RTMultiChannelTrace.from_xml_node (Xml.Node* node);
		public void refresh ();
		public new void update ();
		public Dactl.ChannelVector channel_vector { get; private set; }
		public bool highlight { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class RTTrace : Dactl.Trace, Dactl.Container {
		public RTTrace (Xml.Ns* ns, string id, int points, Dactl.TraceDrawType draw_type, int line_weight, Gdk.RGBA color);
		public RTTrace.from_xml_node (Xml.Node* node);
		public void refresh ();
		public Dactl.DataSeries dataseries { get; private set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public abstract class SimpleWidget : Gtk.Box, Dactl.Widget, Dactl.Buildable, Dactl.Object {
		public SimpleWidget ();
		public abstract void build_from_xml_node (Xml.Node* node);
		protected abstract void update_node ();
		public virtual string id { get; set; }
		protected virtual Xml.Node* node { get; set; }
		protected abstract string xml { get; }
		protected abstract string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/stripchart.ui")]
	public class StripChart : Dactl.CompositeWidget, Dactl.CldAdapter {
		public StripChart ();
		public override void build_from_xml_node (Xml.Node* node);
		[GtkCallback]
		public bool canvas_button_press_event_cb (Gdk.EventButton event);
		[GtkCallback]
		public bool canvas_button_release_event_cb (Gdk.EventButton event);
		protected void connect_notify_signals ();
		public StripChart.from_xml_node (Xml.Node* node);
		public void highlight_trace (string id);
		public virtual void offer_cld_object (Cld.Object object);
		protected void update_node ();
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public Dactl.ChartFlag flags { get; set; }
		public int height_min { get; set; }
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		public int timeout { get; set; }
		public string title { get; set; }
		public int width_min { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[Deprecated (since = "0.4.0")]
	public class StripChartTrace : GLib.Object, Dactl.Object, Dactl.Buildable {
		public StripChartTrace ();
		protected void connect_notify_signals ();
		public StripChartTrace.from_xml_node (Xml.Node* node);
		public int buffer_size { get; set; }
		public string ch_ref { get; set; }
		public Cld.Channel channel { get; set; }
		public bool channel_isset { get; private set; }
		public Gdk.RGBA color { get; set; }
		public Dactl.TraceDrawType draw_type { get; set; }
		public int duration { get; set; }
		public bool highlight { get; set; }
		public double line_weight { get; set; }
		protected virtual Xml.Node* node { get; set; }
		public int stride { get; set; }
		public Gee.List<Dactl.Point> window { get; private set; }
		public int window_size { get; set; }
		protected virtual string xml { get; }
		protected virtual string xsd { get; }
		public signal void buffer_size_changed (int size);
		public signal void window_size_changed (int size);
	}
	[CCode (cheader_filename = "dactl.h")]
	public class StripChartWidget : Dactl.ChartWidget {
		public StripChartWidget ();
		public override void add_point_to_series (string id, double x, double y);
		public Gee.List<Cld.Object> series_data { private get; set; }
		public double time_step { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class SysLog : GLib.Object {
		public SysLog ();
		public static unowned Dactl.SysLog get_default ();
		public static void increase_verbosity ();
		public static void init (bool stdout, string? filename);
		public static void shutdown ();
		public static int verbosity { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class Trace : GLib.Object, Dactl.Object, Dactl.Buildable, Dactl.Drawable {
		protected Gdk.RGBA _color;
		protected Gee.List<Dactl.Point> _pixel_data;
		protected int height;
		protected double initial_line_weight;
		protected int width;
		protected double x_max;
		protected double x_min;
		protected double y_max;
		protected double y_min;
		public Trace ();
		protected void connect_notify_signals ();
		public Trace.from_xml_node (Xml.Node* node);
		protected void update_node ();
		public Gdk.RGBA color { get; set; }
		public Dactl.TraceDrawType draw_type { get; set; }
		public Dactl.TraceFlag flags { get; set; }
		public bool highlight { get; set; }
		public double line_weight { get; set; }
		protected virtual Xml.Node* node { get; set; }
		protected virtual Gee.List<Dactl.Point> pixel_data { get; set; }
		public int points { get; set; }
		protected virtual Dactl.SimplePoint[] raw_data { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	[GtkTemplate (ui = "/org/coanda/libdactl/ui/video-processor.ui")]
	public class VideoProcessor : Dactl.CompositeWidget, Dactl.CldAdapter {
		public VideoProcessor ();
		public override void build_from_xml_node (Xml.Node* node);
		public VideoProcessor.from_xml_node (Xml.Node* node);
		public override void update_objects (Gee.Map<string,Dactl.Object> val);
		public override Gee.Map<string,Dactl.Object> objects { get; set; }
		protected override string xml { get; }
		protected override string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class WidgetInformation : GLib.Object {
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class XAxisArea : Gtk.DrawingArea {
		public XAxisArea ();
		public override bool draw (Cairo.Context cr);
		public double axis_max { get; set; }
		public double axis_min { get; set; }
		public int n_divisions_major { get; set; }
		public int n_divisions_minor { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public class YAxisArea : Gtk.DrawingArea {
		public YAxisArea ();
		public override bool draw (Cairo.Context cr);
		public double axis_max { get; set; }
		public double axis_min { get; set; }
		public int n_divisions_major { get; set; }
		public int n_divisions_minor { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Application : GLib.Object {
		public abstract int launch (string[] args);
		public abstract void register_plugin (Dactl.Plugin plugin);
		public abstract Dactl.ApplicationController controller { get; set; }
		public abstract Dactl.ApplicationModel model { get; set; }
		public abstract Gee.ArrayList<Dactl.Plugin> plugins { get; set; }
		public abstract Dactl.ApplicationView view { get; set; }
		public signal void closed ();
	}
	[CCode (cheader_filename = "dactl.h")]
	[GenericAccessors]
	public interface ApplicationView : GLib.Object {
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Buildable : GLib.Object {
		public static unowned string get_xml_default ();
		public static unowned string get_xsd_default ();
		protected abstract Xml.Node* node { get; set; }
		protected abstract string xml { get; }
		protected abstract string xsd { get; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface CldAdapter : GLib.Object {
		public virtual async void nap (uint interval, int priority = GLib.Priority.DEFAULT);
		public abstract void offer_cld_object (Cld.Object object);
		protected abstract async void request_data ();
		protected abstract bool satisfied { get; set; }
		public signal void request_object (string id);
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Configuration : GLib.Object {
		public abstract bool get_bool (string ns, string key) throws GLib.Error;
		public abstract int get_int (string ns, string key) throws GLib.Error;
		public abstract Gee.ArrayList<int> get_int_list (string ns, string key) throws GLib.Error;
		public abstract string get_string (string ns, string key) throws GLib.Error;
		public abstract Gee.ArrayList<string> get_string_list (string ns, string key) throws GLib.Error;
		public abstract Dactl.ConfigFormat format { get; set; }
		public signal void config_changed (Dactl.ConfigEntry entry);
		public signal void setting_changed (string ns, string key);
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Container : GLib.Object {
		public virtual void add_child (Dactl.Object object);
		public virtual Gee.Map<string,Dactl.Object> get_children (GLib.Type type);
		public virtual Dactl.Object? get_object (string id);
		public virtual Gee.Map<string,Dactl.Object> get_object_map (GLib.Type type);
		public virtual void print_objects (int depth = 0);
		public virtual void remove_child (Dactl.Object object);
		public virtual void sort_objects ();
		public abstract void update_objects (Gee.Map<string,Dactl.Object> val);
		public abstract Gee.Map<string,Dactl.Object> objects { get; set; }
		public signal void request_object (string id);
	}
	[CCode (cheader_filename = "dactl.h")]
	[DBus (name = "org.coanda.Dactl")]
	public interface DBusInterface : GLib.Object {
		public const string OBJECT_PATH;
		public const string SERVICE_NAME;
		public abstract void shutdown () throws GLib.IOError;
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Drawable : GLib.Object {
		public abstract void draw (Cairo.Context cr);
		public abstract void generate (int w, int h, double x_min, double x_max, double y_min, double y_max);
		public abstract void update ();
		public abstract Cairo.ImageSurface image_surface { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Extension : GLib.Object {
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Factory : GLib.Object {
		public abstract Dactl.Object make_object (GLib.Type type) throws GLib.Error;
		public abstract Dactl.Object make_object_from_node (Xml.Node* node) throws GLib.Error;
		public abstract Gee.TreeMap<string,Dactl.Object> make_object_map (Xml.Node* node);
		public signal void build_complete ();
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Object : GLib.Object {
		public virtual int compare (Dactl.Object a);
		public virtual bool equal (Dactl.Object a, Dactl.Object b);
		public virtual string to_string ();
		public abstract string id { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface PluginControl : GLib.Object {
		public abstract string parent_ref { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Settable : GLib.Object {
		public virtual bool button_press_event_cb (Gdk.EventButton event);
		protected abstract void update_settings_menu ();
		protected abstract Dactl.SettingsWidget settings_menu { get; set; }
		public signal void reveal_menu (Gtk.Widget settings_menu);
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface SettingsWidget : Gtk.Widget {
	}
	[CCode (cheader_filename = "dactl.h")]
	public interface Widget : GLib.Object {
		public abstract bool fill { get; set; }
	}
	[CCode (cheader_filename = "dactl.h")]
	public struct SimplePoint {
		public double x;
		public double y;
	}
	[CCode (cheader_filename = "dactl.h")]
	public struct TriplePoint {
		public double a;
		public double b;
		public double c;
	}
	[CCode (cheader_filename = "dactl.h")]
	[Flags]
	public enum AxisFlag {
		DRAW_LABEL,
		DRAW_MINOR_TICKS,
		DRAW_MAJOR_TICKS,
		DRAW_MINOR_LABELS,
		DRAW_MAJOR_LABELS,
		DRAW_START_LABEL,
		DRAW_END_LABEL,
		ROTATE_LABEL,
		REVERSE_ORDER;
		public Dactl.AxisFlag @set (Dactl.AxisFlag flag);
		public Dactl.AxisFlag unset (Dactl.AxisFlag flag);
		public bool is_set (Dactl.AxisFlag flag);
	}
	[CCode (cheader_filename = "dactl.h")]
	[Flags]
	public enum ChartFlag {
		DRAW_TITLE,
		DRAW_GRID,
		DRAW_GRID_BORDER,
		REVERSE_X_AXIS,
		DRAW_X_AXIS_LABEL,
		ROTATE_X_AXIS_LABEL,
		DRAW_Y_AXIS_LABEL,
		ROTATE_Y_AXIS_LABEL;
		public Dactl.ChartFlag @set (Dactl.ChartFlag flag);
		public Dactl.ChartFlag unset (Dactl.ChartFlag flag);
		public bool is_set (Dactl.ChartFlag flag);
	}
	[CCode (cheader_filename = "dactl.h")]
	public enum ColorGradientType {
		RGB,
		HSV;
		public string to_string ();
		public static Dactl.ColorGradientType[] all ();
		public static Dactl.ColorGradientType parse (string value);
	}
	[CCode (cheader_filename = "dactl.h")]
	public enum ConfigEntry {
		NAME
	}
	[CCode (cheader_filename = "dactl.h")]
	public enum ConfigFormat {
		OPTIONS,
		JSON,
		XML
	}
	[CCode (cheader_filename = "dactl.h")]
	[Flags]
	public enum GridFlag {
		DRAW_BORDER;
		public Dactl.GridFlag @set (Dactl.GridFlag flag);
		public Dactl.GridFlag unset (Dactl.GridFlag flag);
		public bool is_set (Dactl.GridFlag flag);
	}
	[CCode (cheader_filename = "dactl.h")]
	public enum LogLevel {
		LEVEL_TRACE
	}
	[CCode (cheader_filename = "dactl.h")]
	public enum Orientation {
		HORIZONTAL,
		VERTICAL;
		public Gtk.Orientation to_gtk ();
		public string to_string ();
		public static Dactl.Orientation[] all ();
		public static Dactl.Orientation parse (string value);
	}
	[CCode (cheader_filename = "dactl.h")]
	[Flags]
	public enum PluginCapabilities {
		NONE,
		CLD_OBJECT,
		DIAGNOSTICS
	}
	[CCode (cheader_filename = "dactl.h")]
	public enum PolarAxisType {
		MAGNITUDE,
		ANGLE;
		public string to_string ();
		public static Dactl.PolarAxisType[] all ();
		public static Dactl.PolarAxisType parse (string value);
	}
	[CCode (cheader_filename = "dactl.h")]
	public enum PositionType {
		LEFT,
		RIGHT,
		TOP,
		BOTTOM;
		public Gtk.PositionType to_gtk ();
		public string to_string ();
		public static Dactl.PositionType[] all ();
		public static Dactl.PositionType parse (string value);
	}
	[CCode (cheader_filename = "dactl.h")]
	public enum TraceDrawType {
		BAR,
		LINE,
		POLYLINE,
		SCATTER;
		public string to_string ();
		public static Dactl.TraceDrawType parse (string value);
		public static Dactl.TraceDrawType[] all ();
	}
	[CCode (cheader_filename = "dactl.h")]
	[Flags]
	public enum TraceFlag {
		SCROLL_LEFT;
		public Dactl.TraceFlag @set (Dactl.TraceFlag flag);
		public Dactl.TraceFlag unset (Dactl.TraceFlag flag);
		public bool is_set (Dactl.TraceFlag flag);
	}
	[CCode (cheader_filename = "dactl.h")]
	public errordomain ConfigError {
		FILE_NOT_FOUND,
		NO_VALUE_SET,
		VALUE_OUT_OF_RANGE,
		INVALID_KEY,
		INVALID_XPATH_EXPR,
		XML_DOCUMENT_EMPTY
	}
	[CCode (cheader_filename = "dactl.h")]
	public errordomain FactoryError {
		TYPE_NOT_FOUND
	}
	[CCode (cheader_filename = "dactl.h")]
	public errordomain PluginError {
		NO_CONFIGURABLE_SETTINGS,
		CONTROL_NOT_AVAILABLE
	}
}
